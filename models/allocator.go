package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// Allocator An allocator object represent an account on the blockchain.
//
// swagger:model Allocator
type Allocator struct {

	// The initial balance of the account, unit is in Wei.
	// Units * 10^0  Wei
	//       * 10^12 Szabo
	//       * 10^15 Finney
	//       * 10^18 Ether
	//
	// Required: true
	Balance *string `json:"balance"`

	// The code for the account.
	Code string `json:"code,omitempty"`

	// The private key generate along with the use of new_allocator,
	// will be provided only once and will not get store.
	// DO NOT SUBMIT YOUR PRIVATE KEY if you fills allocators.
	//
	PrivateKey string `json:"private_key,omitempty"`

	// The initial storage.
	Storage map[string]string `json:"storage,omitempty"`
}

// Validate validates this allocator
func (m *Allocator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBalance(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStorage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Allocator) validateBalance(formats strfmt.Registry) error {

	if err := validate.Required("balance", "body", m.Balance); err != nil {
		return err
	}

	return nil
}

func (m *Allocator) validateStorage(formats strfmt.Registry) error {

	if swag.IsZero(m.Storage) { // not required
		return nil
	}

	if err := validate.Required("storage", "body", m.Storage); err != nil {
		return err
	}

	return nil
}

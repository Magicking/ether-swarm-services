package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Magicking/ether-swarm-services/models"
)

/*StartNodeOK Indicate if the operation was sucessful.

swagger:response startNodeOK
*/
type StartNodeOK struct {

	/*
	  In: Body
	*/
	Payload bool `json:"body,omitempty"`
}

// NewStartNodeOK creates StartNodeOK with default headers values
func NewStartNodeOK() *StartNodeOK {
	return &StartNodeOK{}
}

// WithPayload adds the payload to the start node o k response
func (o *StartNodeOK) WithPayload(payload bool) *StartNodeOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start node o k response
func (o *StartNodeOK) SetPayload(payload bool) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartNodeOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}

}

/*StartNodeDefault Unexpected error.

swagger:response startNodeDefault
*/
type StartNodeDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewStartNodeDefault creates StartNodeDefault with default headers values
func NewStartNodeDefault(code int) *StartNodeDefault {
	if code <= 0 {
		code = 500
	}

	return &StartNodeDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the start node default response
func (o *StartNodeDefault) WithStatusCode(code int) *StartNodeDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the start node default response
func (o *StartNodeDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the start node default response
func (o *StartNodeDefault) WithPayload(payload *models.Error) *StartNodeDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the start node default response
func (o *StartNodeDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *StartNodeDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

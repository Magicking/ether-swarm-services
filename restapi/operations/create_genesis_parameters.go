package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Magicking/ether-swarm-services/models"
)

// NewCreateGenesisParams creates a new CreateGenesisParams object
// with the default values initialized.
func NewCreateGenesisParams() CreateGenesisParams {
	var ()
	return CreateGenesisParams{}
}

// CreateGenesisParams contains all the bound params for the create genesis operation
// typically these are obtained from a http.Request
//
// swagger:parameters createGenesis
type CreateGenesisParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request

	/*Optional genesis, missing informations are filled from
	default.

	  In: body
	*/
	Genesis *models.Genesis
	/*The numbers of allocators to generate.
	  In: query
	*/
	NewAllocator *int64
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls
func (o *CreateGenesisParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error
	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.Genesis
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			res = append(res, errors.NewParseError("genesis", "body", "", err))
		} else {
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.Genesis = &body
			}
		}

	}

	qNewAllocator, qhkNewAllocator, _ := qs.GetOK("new_allocator")
	if err := o.bindNewAllocator(qNewAllocator, qhkNewAllocator, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateGenesisParams) bindNewAllocator(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}
	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("new_allocator", "query", "int64", raw)
	}
	o.NewAllocator = &value

	return nil
}

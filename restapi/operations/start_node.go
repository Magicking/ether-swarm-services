package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// StartNodeHandlerFunc turns a function with the right signature into a start node handler
type StartNodeHandlerFunc func(StartNodeParams) middleware.Responder

// Handle executing the request and returning a response
func (fn StartNodeHandlerFunc) Handle(params StartNodeParams) middleware.Responder {
	return fn(params)
}

// StartNodeHandler interface for that can handle valid start node params
type StartNodeHandler interface {
	Handle(StartNodeParams) middleware.Responder
}

// NewStartNode creates a new http.Handler for the start node operation
func NewStartNode(ctx *middleware.Context, handler StartNodeHandler) *StartNode {
	return &StartNode{Context: ctx, Handler: handler}
}

/*StartNode swagger:route POST /blockchain/node startNode

Start a node

Start a mining node.

*/
type StartNode struct {
	Context *middleware.Context
	Handler StartNodeHandler
}

func (o *StartNode) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewStartNodeParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

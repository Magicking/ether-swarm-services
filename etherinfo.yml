swagger: '2.0'
info:
  title: etherinfo
  description: |
    Etherinfo services prodiving various information for services to perform
  version: "0.1.0"
produces:
  - application/json
consumes:
  - application/json
paths:
  /blockchain/create:
    post:
      summary: Create genesis
      operationId: createGenesis
      description: |
        Create a genesis and lock it. If no genesis are provided new_allocator
        default to 1 otherwise default to 0 if not set.
      responses:
        200:
          description: |
            Return the new genesis with allocators and private keys if new_allocator
            was used.
          schema:
            $ref: '#/definitions/Genesis'
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
      parameters:
        - name: new_allocator
          in: query
          type: integer
          description: The numbers of allocators to create for the new genesis.
        - name: genesis
          in: body
          schema:
            $ref: '#/definitions/Genesis'
          description: |
            Optional genesis object replacing default.
  /blockchain/info:
    get:
      summary: Return information necessary to participate to the blockchain
      operationId: getInformation
      description: |
        Return information necessary to bootstrap a node
        e.g. genesis, bootnodes url, ...
      responses:
        200:
          description: Information of the blockchain.
          schema:
            $ref: '#/definitions/Information'
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
  /blockchain/bootnode:
    post:
      summary: Register a node
      operationId: registerNode
      description: |
        Register (boot)nodes that other nodes will connect to.
      responses:
        200:
          description: Indicate if the operation was successful.
          schema:
            type: boolean
        default:
          description: Unexpected error
          schema:
            $ref: '#/definitions/Error'
      parameters:
        - name: enode_url
          in: query
          type: string
          required: true
          description: The url of the node.
  /blockchain/node:
    post:
      summary: Start a node
      operationId: startNode
      description: Start a mining node.
      responses:
        200:
          description: Indicate if the operation was sucessful.
          schema:
            type: boolean
        default:
          description: Unexpected error.
          schema:
            $ref: '#/definitions/Error'
      parameters:
        - name: etherbase
          in: query
          type: string
          required: true
          description: The etherbase to set to the miner.

definitions:
  Genesis:
    type: object
    description: |
      Genesis block Explanation extracted from Stack Exchange Network
      http://ethereum.stackexchange.com/questions/2376/what-does-each-genesis-json-parameter-mean
      Authors niksmac, eth, Igor Barinov, variable, Siu Ching Pong -Asuka Kenji-
      More documentation at http://paper.gavwood.com/ for the Yellow Paper
    required:
      - nonce
      - timestamp
      - parent_hash
      - extra_data
      - gas_limit
      - difficulty
      - mixhash
    properties:
      nonce:
        type: string
        description: |
          nonce A 64-bit hash, which proves, combined with the mix-hash, that a
          sufficient amount of computation has been carried out on this block,
          the Proof-of-Work (PoW). The combination of nonce and mixhash must
          satisfy a mathematical condition described in the Yellowpaper, 4.3.4.
          Block Header Validity, (44), and allows to verify that the Block has
          really been cryptographically mined and thus, from this aspect, is
          valid. The nonce is the cryptographically secure mining proof-of-work
          that proves beyond reasonable doubt that a particular amount of
          computation has been expended in the determination of this token
          value. (Yellowpager, 11.5. Mining Proof-of-Work).
        default: "0x0000000000000042"
      timestamp:
        type: string
        description: |
          timestamp A scalar value equal to the reasonable output of Unix time()
          function at this block inception. This mechanism enforces a
          homeostasis in terms of the time between blocks. A smaller period
          between the last two blocks results in an increase in the difficulty
          level and thus additional computation required to find the next valid
          block. If the period is too large, the difficulty, and expected time
          to the next block, is reduced. The timestamp also allows verifying the
          order of block within the chain (Yellowpaper, 4.3.4. (43)).
        default: "0x0"
      parent_hash:
        type: string
        description: |
          parentHash The Keccak 256-bit hash of the entire parent block header
          (including its nonce and mixhash). Pointer to the parent block, thus
          effectively building the chain of blocks. In the case of the Genesis
          block, and only in this case, it's 0.
        default: "0x0000000000000000000000000000000000000000000000000000000000000000"
      extra_data:
        type: string
        description: |
          extraData An optional free, but max. 32-byte long space to conserve
          smart things for ethernity. :)
      gas_limit:
        type: string
        description: |
          gasLimit A scalar value equal to the current chain-wide limit of Gas
          expenditure per block. High in our case to avoid being limited by this
          threshold during tests. Note that this does not indicate that we
          should not pay attention to the Gas consumption of our Contracts.
        default: "0x8000000"
      difficulty:
        type: string
        description: |
          difficulty A scalar value corresponding to the difficulty level
          applied during the nonce discovering of this block. It defines the
          mining Target, which can be calculated from the previous block’s
          difficulty level and the timestamp. The higher the difficulty, the
          statistically more calculations a Miner must perform to discover a
          valid block. This value is used to control the Block generation time
          of a Blockchain, keeping the Block generation frequency within a
          target range. On the test network, we keep this value low to avoid
          waiting during tests, since the discovery of a valid Block is required
          to execute a transaction on the Blockchain.
        default: "0x8000000"
      mixhash:
        type: string
        description: |
          mixhash A 256-bit hash which proves, combined with the nonce, that a
          sufficient amount of computation has been carried out on this block,
          the Proof-of-Work (PoW). The combination of nonce and mixhash must
          satisfy a mathematical condition described in the Yellowpaper, 4.3.4.
          Block Header Validity, (44). It allows to verify that the Block has
          really been cryptographically mined, thus, from this aspect, is valid.
        default: "0x0000000000000000000000000000000000000000000000000000000000000000"
      coinbase:
        type: string
        description: |
          coinbase The 160-bit address to which all rewards (in Ether) collected
          from the successful mining of this block have been transferred. They
          are a sum of the mining reward itself and the Contract transaction
          execution refunds. Often named “beneficiary” in the specifications,
          sometimes “etherbase” in the online documentation. This can be
          anything in the Genesis Block since the value is set by the setting of
          the Miner when a new Block is created.
        default: "0x0000000000000000000000000000000000000000"
      alloc:
        type: object
        description: List of allocators to seed the genesis with
          alloc Allows defining a list of pre-filled wallets. That’s an Ethereum
          specific functionality to handle the “Ether pre-sale” period. Use here
          to pre-fill given allocators.
        additionalProperties:
          $ref: '#/definitions/Allocator'
  Allocator:
    type: object
    description: |
      An allocator object represent an account on the blockchain.
    required:
      - balance
    properties:
      code:
        type: string
        description: The code for the account.
      storage:
        type: object
        description: The initial storage.
        additionalProperties:
          type: string
      balance:
        type: string
        description: |
          The initial balance of the account, unit is in Wei.
          Units * 10^0  Wei
                * 10^12 Szabo
                * 10^15 Finney
                * 10^18 Ether
      private_key:
        type: string
        description: |
          The private key generate along with the use of new_allocator,
          will be provided only once and will not get store.
          DO NOT SUBMIT YOUR PRIVATE KEY if you fills allocators.
        default: " "
  Information:
    type: object
    properties:
      bootnodes_urls:
        type: array
        items:
          type: string
      genesis:
        $ref: '#/definitions/Genesis'
      networkid:
        type: integer
  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
      fields:
        type: string
